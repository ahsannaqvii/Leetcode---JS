/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */
Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true
Example 2:

Input: s = "foo", t = "bar"
Output: false
Example 3:

Input: s = "paper", t = "title"
Output: true


var isIsomorphic = function (s, t) {
    const map = {}
    const duplicateMap = {}

    if (s.length != t.length) {
        return false
    }

    // Create map and a duplicate map, and add opposite entries in both the maps 
    for (let i = 0; i < s.length; i++) {
        if (map[s[i]]) {
            if (map[s[i]] != t[i]) return false
            continue
        }
        else {
            map[s[i]] = t[i]
        }
        if (duplicateMap[t[i]]) {
            // if already existing value is not same of s[i] then falsy 
            if (duplicateMap[t[i]] != s[i]) return false
        }
        else {
            duplicateMap[t[i]] = s[i]
        }

    }
    return true
};
